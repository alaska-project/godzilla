import { EndpointService } from '../services/endpoint/endpoint.service';
import { ClientBase } from './client-base';
import { Injectable } from '@angular/core';

@Injectable({
    providedIn: 'root'
})

/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.18.0 (NJsonSchema v9.13.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class UiManagementClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: EndpointService, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * @return Success
     */
    getContexts(): Promise<UiEntityContextReference[]> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetContexts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetContexts(_response);
        });
    }

    protected processGetContexts(response: Response): Promise<UiEntityContextReference[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(UiEntityContextReference.fromJS(item));
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UiEntityContextReference[]>(<any>null);
    }

    /**
     * @param contextId (optional) 
     * @return Success
     */
    getRootNodes(contextId: string | null | undefined): Promise<UiNodeReference[]> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetRootNodes?";
        if (contextId !== undefined)
            url_ += "contextId=" + encodeURIComponent("" + contextId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRootNodes(_response);
        });
    }

    protected processGetRootNodes(response: Response): Promise<UiNodeReference[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(UiNodeReference.fromJS(item));
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UiNodeReference[]>(<any>null);
    }

    /**
     * @param contextId (optional) 
     * @param parentId (optional) 
     * @return Success
     */
    getChildNodes(contextId: string | null | undefined, parentId: string | null | undefined): Promise<UiNodeReference[]> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetChildNodes?";
        if (contextId !== undefined)
            url_ += "contextId=" + encodeURIComponent("" + contextId) + "&";
        if (parentId !== undefined)
            url_ += "parentId=" + encodeURIComponent("" + parentId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetChildNodes(_response);
        });
    }

    protected processGetChildNodes(response: Response): Promise<UiNodeReference[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(UiNodeReference.fromJS(item));
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UiNodeReference[]>(<any>null);
    }

    /**
     * @param contextId (optional) 
     * @param nodeId (optional) 
     * @return Success
     */
    getNode(contextId: string | null | undefined, nodeId: string | null | undefined): Promise<UiNodeValue> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetNode?";
        if (contextId !== undefined)
            url_ += "contextId=" + encodeURIComponent("" + contextId) + "&";
        if (nodeId !== undefined)
            url_ += "nodeId=" + encodeURIComponent("" + nodeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNode(_response);
        });
    }

    protected processGetNode(response: Response): Promise<UiNodeValue> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? UiNodeValue.fromJS(resultData200) : new UiNodeValue();
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UiNodeValue>(<any>null);
    }
}

export class UiEntityContextReference implements IUiEntityContextReference {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IUiEntityContextReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): UiEntityContextReference {
        data = typeof data === 'object' ? data : {};
        let result = new UiEntityContextReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUiEntityContextReference {
    id?: string | undefined;
    name?: string | undefined;
}

export class UiNodeReference implements IUiNodeReference {
    id?: string | undefined;
    parentId?: string | undefined;
    name?: string | undefined;

    constructor(data?: IUiNodeReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.parentId = data["parentId"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): UiNodeReference {
        data = typeof data === 'object' ? data : {};
        let result = new UiNodeReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        return data;
    }
}

export interface IUiNodeReference {
    id?: string | undefined;
    parentId?: string | undefined;
    name?: string | undefined;
}

export class UiNodeValue implements IUiNodeValue {
    id?: string | undefined;
    serializedValue?: string | undefined;

    constructor(data?: IUiNodeValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.serializedValue = data["serializedValue"];
        }
    }

    static fromJS(data: any): UiNodeValue {
        data = typeof data === 'object' ? data : {};
        let result = new UiNodeValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serializedValue"] = this.serializedValue;
        return data;
    }
}

export interface IUiNodeValue {
    id?: string | undefined;
    serializedValue?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}