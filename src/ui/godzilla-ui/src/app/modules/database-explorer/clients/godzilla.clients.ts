import { EndpointService } from '../services/endpoint/endpoint.service';
import { ClientBase } from './client-base';

/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.18.0 (NJsonSchema v9.13.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const GODZILLA_API_BASE_URL = new InjectionToken<string>('GODZILLA_API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class UiManagementClient extends ClientBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(EndpointService) configuration: EndpointService, @Inject(HttpClient) http: HttpClient, @Optional() @Inject(GODZILLA_API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
    }

    /**
     * @return Success
     */
    getContexts(): Observable<UiEntityContextReference[]> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetContexts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetContexts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetContexts(<any>response_);
                } catch (e) {
                    return <Observable<UiEntityContextReference[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UiEntityContextReference[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetContexts(response: HttpResponseBase): Observable<UiEntityContextReference[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UiEntityContextReference.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UiEntityContextReference[]>(<any>null);
    }

    /**
     * @param contextId (optional) 
     * @return Success
     */
    getRootNodes(contextId: string | null | undefined): Observable<UiNodeReference[]> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetRootNodes?";
        if (contextId !== undefined)
            url_ += "contextId=" + encodeURIComponent("" + contextId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRootNodes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRootNodes(<any>response_);
                } catch (e) {
                    return <Observable<UiNodeReference[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UiNodeReference[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRootNodes(response: HttpResponseBase): Observable<UiNodeReference[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UiNodeReference.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UiNodeReference[]>(<any>null);
    }

    /**
     * @param contextId (optional) 
     * @param parentId (optional) 
     * @return Success
     */
    getChildNodes(contextId: string | null | undefined, parentId: string | null | undefined): Observable<UiNodeReference[]> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetChildNodes?";
        if (contextId !== undefined)
            url_ += "contextId=" + encodeURIComponent("" + contextId) + "&"; 
        if (parentId !== undefined)
            url_ += "parentId=" + encodeURIComponent("" + parentId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetChildNodes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetChildNodes(<any>response_);
                } catch (e) {
                    return <Observable<UiNodeReference[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UiNodeReference[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetChildNodes(response: HttpResponseBase): Observable<UiNodeReference[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UiNodeReference.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UiNodeReference[]>(<any>null);
    }

    /**
     * @param contextId (optional) 
     * @param nodeId (optional) 
     * @return Success
     */
    getNode(contextId: string | null | undefined, nodeId: string | null | undefined): Observable<UiNodeValue> {
        let url_ = this.baseUrl + "/godzilla/api/UiManagement/GetNode?";
        if (contextId !== undefined)
            url_ += "contextId=" + encodeURIComponent("" + contextId) + "&"; 
        if (nodeId !== undefined)
            url_ += "nodeId=" + encodeURIComponent("" + nodeId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNode(<any>response_);
                } catch (e) {
                    return <Observable<UiNodeValue>><any>_observableThrow(e);
                }
            } else
                return <Observable<UiNodeValue>><any>_observableThrow(response_);
        }));
    }

    protected processGetNode(response: HttpResponseBase): Observable<UiNodeValue> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UiNodeValue.fromJS(resultData200) : new UiNodeValue();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UiNodeValue>(<any>null);
    }
}

export class UiEntityContextReference implements IUiEntityContextReference {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IUiEntityContextReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): UiEntityContextReference {
        data = typeof data === 'object' ? data : {};
        let result = new UiEntityContextReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IUiEntityContextReference {
    id?: string | undefined;
    name?: string | undefined;
}

export class UiNodeReference implements IUiNodeReference {
    id?: string | undefined;
    parentId?: string | undefined;
    name?: string | undefined;
    isLeaf?: boolean | undefined;

    constructor(data?: IUiNodeReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.parentId = data["parentId"];
            this.name = data["name"];
            this.isLeaf = data["isLeaf"];
        }
    }

    static fromJS(data: any): UiNodeReference {
        data = typeof data === 'object' ? data : {};
        let result = new UiNodeReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["isLeaf"] = this.isLeaf;
        return data; 
    }
}

export interface IUiNodeReference {
    id?: string | undefined;
    parentId?: string | undefined;
    name?: string | undefined;
    isLeaf?: boolean | undefined;
}

export class UiNodeValue implements IUiNodeValue {
    id?: string | undefined;
    serializedValue?: string | undefined;

    constructor(data?: IUiNodeValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.serializedValue = data["serializedValue"];
        }
    }

    static fromJS(data: any): UiNodeValue {
        data = typeof data === 'object' ? data : {};
        let result = new UiNodeValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serializedValue"] = this.serializedValue;
        return data; 
    }
}

export interface IUiNodeValue {
    id?: string | undefined;
    serializedValue?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}